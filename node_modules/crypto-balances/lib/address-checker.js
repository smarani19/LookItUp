// Generated by CoffeeScript 1.10.0
(function() {
  var bs58check;

  bs58check = require('bs58check');

  module.exports = {
    chainso: function(addr) {
      return RegExp('^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$').test(addr) || RegExp('^L[a-km-zA-HJ-NP-Z1-9]{33}$').test(addr);
    },
    doge: function(addr) {
      return RegExp('^D[a-km-zA-HJ-NP-Z1-9]{33}$').test(addr);
    },
    omni: function(addr) {
      return RegExp('^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$').test(addr);
    },
    ethereum: function(addr) {
      return RegExp('^(0x)?[0-9a-fA-F]{40}$').test(addr);
    },
    ripple: function(addr) {
      return RegExp('^r[1-9A-HJ-NP-Za-km-z]{25,33}$').test(addr);
    },
    cryptoid: function(addr) {
      return RegExp('^[CGRXPB][a-km-zA-HJ-NP-Z1-9]{33}$').test(addr);
    },
    openassets: function(addr) {
      var decoded, error, error1;
      try {
        decoded = bs58check.decode(addr);
      } catch (error1) {
        error = error1;
        return false;
      }
      return decoded[0] === 19;
    },
    counterparty: function(addr) {
      return RegExp('^[13][a-km-zA-HJ-NP-Z1-9]{25,34}$').test(addr);
    },
    factom: function(addr) {
      var decoded, error, error1;
      if (addr.length !== 52) {
        return false;
      }
      try {
        decoded = bs58check.decode(addr);
      } catch (error1) {
        error = error1;
        return false;
      }
      return decoded[0] === (95 || 177);
    },
    nxt: function(addr) {
      return RegExp('^(NXT|nxt)(-[a-zA-Z0-9]{4,5}){4}$').test(addr);
    },
    nxtassets: function(addr) {
      return RegExp('^(NXT|nxt)(-[a-zA-Z0-9]{4,5}){4}$').test(addr);
    },
    nem: function(addr) {
      return RegExp('^[nN][a-zA-Z0-9]{5}(-[a-zA-Z0-9]{4,6}){6}$').test(addr);
    },
    bitshares: function(addr) {
      return RegExp('^[a-z0-9-.]{1,25}$').test(addr);
    }
  };

}).call(this);
