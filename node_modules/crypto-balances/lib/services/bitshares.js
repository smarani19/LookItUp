// Generated by CoffeeScript 1.10.0
(function() {
  var InvalidResponseError, Promise, _, bitAssets, bitshares, options, req,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require("bluebird");

  req = Promise.promisify(require("request"));

  _ = require("lodash");

  InvalidResponseError = require("../errors").InvalidResponseError;

  bitAssets = {
    CNY: 'BITCNY',
    USD: 'BITUSD',
    BTC: 'BITBTC',
    SILVER: 'BITSILVER',
    GOLD: 'BITGOLD',
    EUR: 'BITEUR'
  };

  options = {
    url: "http://node.cyber.fund:8055/rpc",
    method: 'GET',
    headers: {
      'Content-Type': 'application/json-rpc',
      'Accept': 'application/json-rpc'
    }
  };

  bitshares = function(addr) {
    options.body = JSON.stringify({
      'jsonrpc': '2.0',
      'method': 'list_account_balances',
      'params': [addr, []]
    });
    return req(options).timeout(2000).cancellable().spread(function(resp, json) {
      var i, ref, results;
      json = JSON.parse(json);
      if ((ref = resp.statusCode, indexOf.call((function() {
        results = [];
        for (i = 200; i <= 299; i++){ results.push(i); }
        return results;
      }).apply(this), ref) >= 0) && _.isArray(json.result)) {
        return json.result;
      } else {
        if (_.isObject(json) && json.message === "error") {
          return [];
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      }
    }).map(function(asset) {
      options.body = JSON.stringify({
        "jsonrpc": "2.0",
        "method": "get_asset",
        "params": [asset.asset_id]
      });
      return req(options).timeout(2000).cancellable().spread(function(resp, json) {
        var i, ref, results;
        json = JSON.parse(json);
        if (ref = resp.statusCode, indexOf.call((function() {
          results = [];
          for (i = 200; i <= 299; i++){ results.push(i); }
          return results;
        }).apply(this), ref) >= 0) {
          if (_.isNull(json)) {
            return _.merge(asset, {
              name: "" + asset.asset_id,
              divisibility: 0
            });
          } else if (json.asset === asset.asset) {
            return _.merge(asset, {
              name: "" + json.result.symbol,
              divisibility: json.result.precision
            });
          }
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      });
    }).map(function(asset) {
      var balance, quantity, token;
      balance = parseInt(asset.amount, 10);
      quantity = balance / (Math.pow(10, asset.divisibility));
      token = _.has(bitAssets, asset.name) ? bitAssets[asset.name] : asset.name;
      return {
        status: "success",
        service: "http://node.cyber.fund:8092/rpc",
        address: addr,
        quantity: quantity,
        asset: token
      };
    }).filter(function(item) {
      return item.quantity !== 0;
    })["catch"](Promise.TimeoutError, function(e) {
      return [
        {
          status: 'error',
          service: url,
          message: e.message,
          raw: e
        }
      ];
    })["catch"](InvalidResponseError, function(e) {
      return [
        {
          status: "error",
          service: e.service,
          message: e.message,
          raw: e.response
        }
      ];
    });
  };

  module.exports = bitshares;

}).call(this);
