// Generated by CoffeeScript 1.10.0
(function() {
  var InvalidResponseError, Promise, _, omni, property_map, req,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require("bluebird");

  req = Promise.promisify(require("request"));

  _ = require("lodash");

  InvalidResponseError = require("../errors").InvalidResponseError;

  property_map = {
    1: 'Omni',
    3: 'MSC',
    56: 'SEC',
    39: 'AMP',
    31: 'USDT',
    35: 'TAU',
    44: 'ZOOZ'
  };

  omni = function(addr) {
    return Promise.all(Object.keys(property_map)).map(function(property_id) {
      var url;
      url = "http://omnichest.info/requeststat.aspx?stat=balance&prop=" + property_id + "&address=" + addr;
      return req(url, {
        json: true
      }).timeout(4000).cancellable().spread(function(resp, json) {
        var i, ref, results;
        if (ref = resp.statusCode, indexOf.call((function() {
          results = [];
          for (i = 200; i <= 299; i++){ results.push(i); }
          return results;
        }).apply(this), ref) >= 0) {
          return {
            status: "success",
            service: "http://omnichest.info",
            address: addr,
            quantity: json,
            asset: property_map[property_id]
          };
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      });
    }).filter(function(item) {
      return item.quantity !== 0;
    })["catch"](Promise.TimeoutError, function(e) {
      return [
        {
          status: 'error',
          service: url,
          message: e.message,
          raw: e
        }
      ];
    })["catch"](InvalidResponseError, function(e) {
      return [
        {
          status: "error",
          service: e.service,
          message: e.message,
          raw: e.response
        }
      ];
    });
  };

  module.exports = omni;

}).call(this);
