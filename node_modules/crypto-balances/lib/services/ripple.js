// Generated by CoffeeScript 1.10.0
(function() {
  var InvalidResponseError, Promise, _, req, ripple,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require("bluebird");

  req = Promise.promisify(require("request"));

  _ = require("lodash");

  InvalidResponseError = require("../errors").InvalidResponseError;

  ripple = function(addr) {
    var url;
    url = "https://api.ripple.com/v1/accounts/" + addr + "/balances?";
    return req(url, {
      json: true
    }).timeout(2000).cancellable().spread(function(resp, json) {
      var i, ref, results;
      if ((ref = resp.statusCode, indexOf.call((function() {
        results = [];
        for (i = 200; i <= 299; i++){ results.push(i); }
        return results;
      }).apply(this), ref) >= 0) && _.isArray(json.balances)) {
        return json.balances;
      } else {
        if (_.isObject(json) && json.message === "error") {
          return [];
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      }
    }).filter(function(item) {
      return item.value !== '0';
    }).map(function(asset) {
      return {
        status: "success",
        service: "https://api.ripple.com",
        address: addr,
        quantity: asset.value,
        asset: asset.currency
      };
    })["catch"](Promise.TimeoutError, function(e) {
      return [
        {
          status: 'error',
          service: url,
          message: e.message,
          raw: e
        }
      ];
    })["catch"](InvalidResponseError, function(e) {
      return [
        {
          status: "error",
          service: e.service,
          message: e.message,
          raw: e.response
        }
      ];
    });
  };

  module.exports = ripple;

}).call(this);
