// Generated by CoffeeScript 1.10.0
(function() {
  var InvalidResponseError, Promise, _, nxt_assets, req,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require("bluebird");

  req = Promise.promisify(require("request"));

  _ = require("lodash");

  InvalidResponseError = require("../errors").InvalidResponseError;

  nxt_assets = function(addr) {
    var url;
    url = "http://jnxt.org:7876/nxt?requestType=getAccountAssets&account=" + addr;
    return req(url, {
      json: true
    }).timeout(2000).cancellable().spread(function(resp, json) {
      var i, ref, results;
      if ((ref = resp.statusCode, indexOf.call((function() {
        results = [];
        for (i = 200; i <= 299; i++){ results.push(i); }
        return results;
      }).apply(this), ref) >= 0) && _.isArray(json.accountAssets)) {
        return json.accountAssets;
      } else {
        if (_.isObject(json) && json.message === "error") {
          return [];
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      }
    }).map(function(asset) {
      var assetUrl;
      assetUrl = "http://jnxt.org:7876/nxt?requestType=getAsset&asset=" + asset.asset;
      return req(assetUrl, {
        json: true
      }).timeout(2000).cancellable().spread(function(resp, json) {
        var i, ref, results;
        if (ref = resp.statusCode, indexOf.call((function() {
          results = [];
          for (i = 200; i <= 299; i++){ results.push(i); }
          return results;
        }).apply(this), ref) >= 0) {
          if (_.isNull(json)) {
            return _.merge(asset, {
              name: "" + asset.asset,
              divisibility: 0
            });
          } else if (json.asset === asset.asset) {
            return _.merge(asset, {
              name: "" + json.name,
              divisibility: json.decimals
            });
          }
        } else {
          throw new InvalidResponseError({
            service: url,
            response: resp
          });
        }
      });
    }).map(function(asset) {
      var balance, quantity;
      balance = parseInt(asset.quantityQNT, 10);
      quantity = balance / (Math.pow(10, asset.divisibility));
      return {
        status: "success",
        service: "http://jnxt.org:7876",
        address: addr,
        quantity: quantity.toFixed(6),
        asset: asset.name
      };
    })["catch"](Promise.TimeoutError, function(e) {
      return [
        {
          status: 'error',
          service: url,
          message: e.message,
          raw: e
        }
      ];
    })["catch"](InvalidResponseError, function(e) {
      return [
        {
          status: "error",
          service: e.service,
          message: e.message,
          raw: e.response
        }
      ];
    });
  };

  module.exports = nxt_assets;

}).call(this);
